import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;

import processing.core.PApplet;
import processing.sound.AudioIn;
import processing.sound.FFT;
import processing.sound.Sound;
import processing.sound.Waveform;

/* A class with the main function and Processing visualizations to run the demo */

public class ClassifyVibration extends PApplet {
	FFT fft;
	AudioIn in;
	Waveform waveform;
	int bands = 512;
	int nsamples = 1024;
	float[] spectrum = new float[bands];
	float[] fftFeatures = new float[bands];
	static String[] classNames = {"quiet", "palm", "shake"};
	int classIndex = 0;
	int dataCount = 0;
	
	static int randomIndex = 0;
	static long timerTime = 0;
	static long mainTime = 0;
	static boolean hasPrinted = false;
	static int score = 0;
	static int lastLevel = -1;
	
	static int numShake = 0;
	static int numPalm = 0;
	static int numSample = 0;
	static long timeShake = 0;
	static long timePalm = 0;
	
	static int xCor = 500;
	static int yCor = 80;
	
	static ArrayList<Integer> xCors = new ArrayList<Integer>();
	static ArrayList<String> labels = new ArrayList<String>();

	MLClassifier classifier;
	
	Map<String, List<DataInstance>> trainingData = new HashMap<>();
	{for (String className : classNames){
		trainingData.put(className, new ArrayList<DataInstance>());
	}}
	
	DataInstance captureInstance (String label){
		DataInstance res = new DataInstance();
		res.label = label;
		res.measurements = fftFeatures.clone();
		return res;
	}
	
	public static void main(String[] args) {
		Thread thread = new Thread()
        {

            public void run()
            {
                while (true){
                	randomIndex = new Random().nextInt(1, classNames.length);
                	hasPrinted = false;
                	timerTime = System.currentTimeMillis();
                	labels.add(classNames[randomIndex]);
            		xCors.add(800);
                	System.out.println(timerTime);
                    System.out.println(classNames[randomIndex] + "!");
                    try {
						Thread.sleep(5000 + (int)(Math.random() * 10000));
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
                }
            }
        };
        thread.start();
		PApplet.main("ClassifyVibration");
	}
	
	public void settings() {
		size(512, 400);
	}

	public void setup() {
		
		/* list all audio devices */
		Sound.list();
		Sound s = new Sound(this);
		  
		/* select microphone device */
		s.inputDevice(2);
		    
		/* create an Input stream which is routed into the FFT analyzer */
		fft = new FFT(this, bands);
		in = new AudioIn(this, 0);
		waveform = new Waveform(this, nsamples);
		waveform.input(in);
		
		/* start the Audio Input */
		in.start();
		  
		/* patch the AudioIn */
		fft.input(in);
		
		
	}

	public void draw() {
		background(0);
		fill(0);
		stroke(255);
		
		waveform.analyze();

		beginShape();
		rect(10, 60, 100, 30);  
		for(int i = 0; i < nsamples; i++)
		{
			vertex(
					map(i, 0, nsamples, 0, width),
					map(waveform.data[i], -1, 1, 0, height)
					);
		}
		
		endShape();

		fft.analyze(spectrum);
		
		String guessedLabel = "";
		

		for(int i = 0; i < bands; i++){

			/* the result of the FFT is normalized */
			/* draw the line for frequency band i scaling it up by 40 to get more amplitude */
			line( i, height, i, height - spectrum[i]*height*40);
			fftFeatures[i] = spectrum[i];
		} 

		fill(255);
		textSize(30);
		
		
		
		for (int i = 0; i < labels.size(); i++) {
			text(labels.get(i), xCors.get(i), yCor);
			xCors.set(i,  xCors.get(i) - 1);
			
			if (xCors.get(i) < 0) {
				labels.remove(i);
				xCors.remove(i);
			}
		}
		
		
		if(classifier != null) {
			guessedLabel = classifier.classify(captureInstance(null));
		}else {
			text(classNames[classIndex], 20, 30);
			dataCount = trainingData.get(classNames[classIndex]).size();
			text("Data collected: " + dataCount, 20, 60);
		}
		
		int xDiff = xCors.get(0) - 10;
		
		if (xDiff >= 70) {
			return;
		}
		
		mainTime = System.currentTimeMillis();
		numSample++;
		
		String targetLabel = labels.get(0);
		
		if (guessedLabel.equals("palm"))
		{
			numPalm++;
			if (numPalm == 1)
				timePalm = mainTime;
		}
		else if (guessedLabel.equals("shake"))
		{
			numShake++;
			if (numShake == 1)
				timeShake = mainTime;
		}
		
		if (numSample == 100) {
			if (numPalm != 0 && numShake > 5) {
				guessedLabel = "shake";
				mainTime = timeShake;
			}
			else if (numPalm != 0)
			{
				guessedLabel = "palm";
				mainTime = timePalm;
			}
			else
			{
				guessedLabel = "quiet";
			}
			
			if (guessedLabel.equals(targetLabel)) {
				System.out.println("You are correct!");
				labels.remove(0);
				xCors.remove(0);
			} else {
				System.out.println("You are wrong!");
			}
			
			System.out.println(guessedLabel);
			
			
			
			if (xDiff < 0) {
				System.out.println("Too Late!");
				lastLevel = -1;
			} else if (xDiff > 60) {
				System.out.println("Too Early!");
				lastLevel = -1;
			} else if (xDiff > 50) {
				System.out.println("You gained 1 points");
				score += 1;
				
				if (lastLevel >= 2) {
					System.out.println("Combo + 1!");
					score += 1;
				}
				
				lastLevel = max(lastLevel, 2);
			} else if (xDiff > 40) {
				System.out.println("You gained 3 points");
				score += 3;
				
				if (lastLevel >= 3) {
					System.out.println("Combo + 1!");
					score += 3;
				}
				
				lastLevel = max(lastLevel, 3);
			} else if (xDiff > 30) {
				System.out.println("You gained 9 points");
				score += 9;
				
				if (lastLevel >= 4) {
					System.out.println("Combo + 1!");
					score += 9;
				}
				
				lastLevel = max(lastLevel, 4);
			} else {
				System.out.println("You gained 50 points");
				score += 50;
				
				if (lastLevel >= 5) {
					System.out.println("Combo + 1!");
					score += 50;
				}
				lastLevel = max(lastLevel, 5);
			}
			
			System.out.println("Your current score: " + score);
			
			numSample = 0;
			numShake = 0;
			numPalm = 0;
			timeShake = 0;
			timePalm = 0;
		}
	}
	
	public void keyPressed() {
		if (key == '.') {
			classIndex = (classIndex + 1) % classNames.length;
		}
		
		else if (key == 't') {
			if(classifier == null) {
				println("Start training ...");
				classifier = new MLClassifier();
				classifier.train(trainingData);
			}else {
				classifier = null;
			}
		}
		
		else if (key == 's') {
			// Yang: add code to save your trained model for later use
			try (FileOutputStream fos = new FileOutputStream("object.dat");
				     ObjectOutputStream oos = new ObjectOutputStream(fos)) {

				    // create a new user object
				    oos.writeObject(classifier);

				} catch (IOException ex) {
				    ex.printStackTrace();
				}
		}
		
		else if (key == 'l') {
			// Yang: add code to load your previously trained model
			try {
				 
	            FileInputStream fileIn = new FileInputStream("object.dat");
	            ObjectInputStream objectIn = new ObjectInputStream(fileIn);
	 
	            Object obj = objectIn.readObject();
	 
	            System.out.println("The Object has been read from the file");
	            objectIn.close();
	            classifier = (MLClassifier) obj;
	 
	        } catch (Exception ex) {
	            ex.printStackTrace();
	        }
		}
			
		else {
			trainingData.get(classNames[classIndex]).add(captureInstance(classNames[classIndex]));
		}
	}

}
